set nocompatible              " be iMproved, required
filetype off                  " required

"==== THE MOST IMPORTANT =====
:imap jk <Esc>


" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The good Stuff
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdtree'
Plugin 'https://github.com/itchyny/lightline.vim'
Plugin 'https://github.com/tpope/vim-fugitive'
Plugin 'easymotion/vim-easymotion'
Plugin 'https://github.com/airblade/vim-gitgutter'
Plugin 'https://github.com/w0rp/ale'
Plugin 'junegunn/fzf'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'benmills/vimux'
Plugin 'thaerkh/vim-workspace'

" For Writing
Plugin 'https://github.com/reedes/vim-pencil'

" Colorschemes
Plugin 'flazz/vim-colorschemes'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" ========================== Personal Settings ===================

" Colors!
syntax enable
set background=dark
set termguicolors

" Close NERDtree if it's the last window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Open NERDtree if VIM opens a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif


set number
let python_highlight_all=1
syntax on
set incsearch
set nohlsearch

"This wil allow the tab complete file finder to work ============
set path+=**
set wildmenu

" This is for tab completion =====================================
set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=120
set expandtab
set autoindent
set fileformat=unix

"For YCM =================================================
" let g:ycm_python_binary_path = '/usr/bin/python3'
" let g:ycm_autoclose_preview_window_after_completion=2
" let g:ycm_server_python_interpreter = '/usr/bin/python3'

" shit for powerline ===========================================
set rtp+=/usr/share/powerline/bindings/vim/

" Always show statuslie =========================================
set laststatus=2

" Codear
" folding
set foldmethod=indent
set foldnestmax=3

" YCM info crap for C++ configuration
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

" Does not recognize custom colors until down here
colorscheme badwolf


" Remap the leader
let mapleader=","

" Typescript Support
autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript

" Treat Arduino files like C++. Tab correction
autocmd BufNewFile,BufReadPost *.ino,*.pde set filetype=cpp
autocmd FileType cpp setlocal shiftwidth=2 tabstop=2

" Add python debugging to program and remove easily
nnoremap +d Oimport pudb; pudb.set_trace()<esc>0j
nnoremap -d :set hlsearch <enter> /pdb

" Mouse mode and clipboard that make sense
set clipboard=unnamedplus
set mouse=a


" ###### Vim Splits - Transcend #####
" Navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" Better Opening
set splitbelow
set splitright

" Easy vertical Splits
nnoremap <silent> vv <C-w>v


" ##### Personal Cheat sheet #####
" Quick reference stuff I should know

" ##### Vim splits
" " Resizing 
" " Max out the height of the current split
" ctrl + w _
" " Max out the width of the current split
" ctrl + w |
" " Normalize all split sizes, which is very handy when resizing terminal
" ctrl + w =

" 
" ##### Swapping splits
" " Swap top/bottom or left/right split
" Ctrl+W R
" " Break out current window into a new tabview
" Ctrl+W T
" " Close every window in the current tabview but the current one
" Ctrl+W o


" Initialize pencil based on file type
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  " autocmd FileType text         call pencil#init()
augroup END

" Spellcheck when writing markdown
autocmd FileType markdown setlocal spell


"########### Vimux stuff ########## 
" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>

" let g:VimuxOrientation = "h"

" ALEnext remap
map <Leader><Leader>a :ALENext<CR>
map <Leader><Leader>s :ALEPrevious<CR>

let g:ale_set_highlights = 0 " Disable highligting

" Workspace trigger
nnoremap <leader>s :ToggleWorkspace<CR>

" NOTE: use CloseHiddenBuffers to, well, close hidden buffers. Hidden buffers can become too large over time
